#!/usr/bin/env ruby

dir = File.dirname(File.absolute_path(__FILE__))
latitude = 46.2797
longitude = -119.2814
# longitude = -73.952222

require 'phases_space'
require 'prime'

# List of allowed intra-intervals
tuneable = MM::Ratio.from_yaml(File.read(dir + "/../data/tuneable.yml"))
# Default mode is to only use prime numbers between 1 and 11
tuneable.reject! {|t|
  t.numerator.prime_division.any? {|p|
    p[0] > 11
  } ||
  t.denominator.prime_division.any? {|p|
    p[0] > 11
  }
}
# The "central morph" to start from
start_morph = MM::Ratio.from_yaml(File.read(dir + "/../data/start_morph.yml"))

space = PhasesSpace.new tuneable
space.delta = 0.03

step = latitude / 90.0 / 14.0
angle = (longitude / 180.0) * Math::PI

# Enter the space
space.enter :start => start_morph, :step => step, :angle => angle do |s|
  b = ->(i) {
    distance = step * i
    to = [Math.sin(angle) * distance, Math.cos(angle) * distance]
    res = morph start_morph, to: to
    print "to: #{to}\n" + res.join(", ") + "\n"
    res
  }
  (1..14).to_a.reverse.map(&b)
  (-14..-1).to_a.reverse.map(&b)
end

